summary(modelo)
anova(modelo)
library(readxl)
BD_ESTADISTICA_II <- read_excel("C:/Users/Carlos Campos/Desktop/Proyecto/BD ESTADISTICA II.xlsx",
sheet = "RECURSOS ENERGETICOS 3 (copia)",
range = "A1:Q408")
View(BD_ESTADISTICA_II)
library(readxl)
BD_ESTADISTICA_II <- read_excel("C:/Users/Carlos Campos/Desktop/Proyecto/BD ESTADISTICA II.xlsx",
sheet = "RECURSOS ENERGETICOS 3 (copia)",
range = "A1:Q408")
View(BD_ESTADISTICA_II)
library(readxl)
BD_ESTADISTICA_II <- read_excel("C:/Users/Carlos Campos/Desktop/Proyecto/BD ESTADISTICA II.xlsx",
sheet = "RECURSOS ENERGETICOS 3 (copia)",
range = "A1:Q408")
View(BD_ESTADISTICA_II)
BD_ESTADISTICA_II <- read_excel("C:/Users/Carlos Campos/Desktop/Proyecto/BD ESTADISTICA II.xlsx",
sheet = "RECURSOS ENERGETICOS 3 (copia)",
range = "A1:Q408")
Datos<-BD_ESTADISTICA_II #Para cortar el nombre
#Modelo 1
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Energía primaria no renovable`)
#Modelo 2
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x)
summary(modelo)
anova(modelo)
#Modelo 3
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Emisiones de G.E.I. del sector energético`)
modelo<-lm(formula=y~x)
summary(modelo)
anova(modelo)
#Modelo 3
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Emisiones de G.E.I. del sector energético`)
z<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x+z)
summary(modelo)
anova(modelo)
#Modelo 2
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x)
summary(modelo)
anova(modelo)
#Modelo 3
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
#Modelo 3
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Emisiones de G.E.I. del sector energético`)
z<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x+z)
summary(modelo)
anova(modelo)
x<-c(Datos$`Producción primaria`)
#Modelo 1
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Producción primaria`)
BD_ESTADISTICA_II <- read_excel("C:/Users/Carlos Campos/Desktop/Proyecto/BD ESTADISTICA II.xlsx",
sheet = "RECURSOS ENERGETICOS 3 (copia)",
range = "A1:Q408")
Datos<-BD_ESTADISTICA_II #Para cortar el nombre
#Modelo 1
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
#Modelo 1
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Producción primaria`)
modelo<-lm(formula=y~x)
summary(modelo)
anova(modelo)
#Modelo 2
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Producción primaria`)
z<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x*z)
summary(modelo)
anova(modelo)
#Modelo 1
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x)
summary(modelo)
anova(modelo)
#Modelo 2
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Producción primaria`)
z<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x*z)
summary(modelo)
anova(modelo)
#Modelo 2
y<-c(Datos$`Variación de temperatura media`) #Variable dependiente
x<-c(Datos$`Producción primaria`)
z<-c(Datos$`Poblacion Total`)
modelo<-lm(formula=y~x+x*z)
summary(modelo)
anova(modelo)
modelo<-lm(formula=y~z+x*z)
summary(modelo)
anova(modelo)
paste("R is", text)
#Example
text<-"awesome"
paste("R is", text)
text1<-"R is"
text2<-" awesome"
paste(text1,text2)
text1<-"R is"
text2<-"awesome"
paste(text1,text2)
# Assign  the same value to multiple variables in one line
var1<-var2<-var3<-"Orange"
var1
var2
var3
# class() sirve para saber qué tipo de datos estamos manejando
x<-10.5
class(x)
x<-1000L
clas(x)
x<-1000L
class(x)
x<-9i+3
class(x)
ceiling(1.4)
floor(1.4)
str<-'Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.'
str
str<-'Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.'
str
cat(str)
len(str)
lenght(str)
# To find the number of characters in a string, use nchar()
nchar(str)
# To find the number of characters in a string, use nchar()
str<-'Hello World'
nchar(str)
str<-'Hello World'
grepl('H',str)
str<- "We are the so-called \"Vikingos\", from the north"
str
cat(sr)
cat(str)
my_var<-3
my_var<<-5
3-> my_var
5->> my_var
x<-1:10
i=1
i=1
while(i<6){
print(i)
i=i+1
}
print('Hello world')
install.packages("installr")
library(installr)
version
updateR()
version
version
tinytex::install_tinytex()
library(readxl) #Leer datos de archivos de excel
library(MASS) # Distribuciones de pr. básicas
library(actuar) #Distribuciones de pr. complementarias
library(fitdistrplus)#Ajuste de curvas de pr.
library(goftest) #Validar el modelo con pruebas de bondad de ajuste
library(rriskDistributions) #Ajuste automatico de curvas de pr.
##### Obtencion de datos
perdidas <- read_excel("Taller/AP Ajuste de Curvas.xlsx", sheet = "R")
##### Obtencion de datos
perdidas <- read_excel("Taller/AP Ajuste de Curvas.xlsx", sheet = "R")
library(readxl)
perdidas <- read_excel("C:/Users/Carlos Campos/Desktop/Taller/AP Ajuste de Curvas.xlsx",
sheet = "R")
View(perdidas)
datos=perdidas$Datos
##### Analisis descriptivo de los datos
summary(datos)
hist(datos,freq=FALSE)
plot(ecdf(datos)) #cumulative dist function
mod1<-fitdist(datos,"gamma",method="mle")
#Estimacion por maximaverosimilitud, es el mas potente
mod1
summary(mod1)
##### Verificacion de resultados
par(mfrow=c(2,2))
denscomp(mod1) #Funcion de densidad
cdfcomp(mod1) # Funcion de distribucion
qqcomp(mod1) #Cuantiles
ppcomp(mod1)
hip1<-ks.test(datos,"pgamma",mod1$estimate[1],mod1$estimate[2])
hip1
hip2<-ad.test(datos,"pgamma",mod1$estimate[1],mod1$estimate[2])
hip2
gofstat(mod1,fitnames=c('Gamma'))
mod2<-fitdist(datos,"weibull",method="mle")
mod2
summary(mod2)
##### Verificacion de resultados
par(mfrow=c(2,2))
denscomp(mod2) #Funcion de densidad
cdfcomp(mod2) # Funcion de distribucion
qqcomp(mod2) #Cuantiles
ppcomp(mod2) #Probabilidades
hip3<-ks.test(datos,"pweibull",mod2$estimate[1],mod2$estimate[2])
hip3
hip4<-ad.test(datos,"pweibull",mod2$estimate[1],mod2$estimate[2])
hip4
gofstat(mod2,fitnames=c('Weibull'))
gofstat(list(mod1,mod2),fitnames=c('Gamma', 'Weibull'))
par(mfrow=c(2,2))
denscomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
denscomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
cdfcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
ppcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
qqcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
par(mfrow=c(2,2))
denscomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
cdfcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
ppcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
qqcomp(list(mod1,mod2),legendtext = c('Gamma','Weibull'))
par(mfrow=c(2,2))
denscomp(list(mod1,mod2),legendtext = c("Gamma","Weibull"))
cdfcomp(list(mod1,mod2),legendtext = c("Gamma","Weibull"))
ppcomp(list(mod1,mod2),legendtext = c("Gamma","Weibull"))
qqcomp(list(mod1,mod2),legendtext = c("Gamma","Weibull"))
perdidas2 <- read_excel("Taller/AP Ajuste de Curvas.xlsx", sheet = "IF")
perdida2 <- read_excel("C:/Users/Carlos Campos/Desktop/Taller/AP Ajuste de Curvas.xlsx")
View(perdida2)
library(readxl)
perdidas2 <- read_excel("C:/Users/Carlos Campos/Desktop/Taller/AP Ajuste de Curvas.xlsx",
sheet = "IF")
View(perdidas2)
datos2=perdidas$Datos
datos2=perdidas2$IF
datos2=perdidas2$IF
datos2
datos3=perdidas2$`LN(IF)`
datos3
#Ajuste de Modelos de Probabilidad
fit.cont(datos2)
fit.cont(datos3)
mod3<-fitdist(datos3,"weibull",method="mle")
mod3
summary(mod3)
par(mfrow=c(2,2))
denscomp(mod3) #Funcion de densidad
cdfcomp(mod3) # Funcion de distribucion
qqcomp(mod3) #Cuantiles
ppcomp(mod3) #Probabilidades
hip5<-ks.test(datos3,"pweibull",mod3$estimate[1],mod3$estimate[2])
hip5
hip6<-ad.test(datos3,"pweibull",mod3$estimate[1],mod3$estimate[2])
hip6
##### Comparar muchos modelos
gofstat(mod3,fitnames=c('Weibull'))
# Ejemplo de distribución Binomial (n,p)
n=10
p=0.30
fden<-dbinom(0:10,n,p)
fdis<-pbinom(0:10,n,p)
fsob<-1-fids
fsob<-1-fdis
par(mfrow=c(2,3))
par(mfrow=c(2,3))
barplot(fden,main='Función de densidad',color=2)
par(mfrow=c(2,3))
barplot(fden,main='Función de densidad',color=2)
barplot(fdis,main='Función de distribución',color=3)
barplot(fsob,main='Función de sobrevivncia',color=4)
par(mfrow=c(2,3))
barplot(fden,main='Función de densidad',col=2)
barplot(fdis,main='Función de distribución',col=3)
barplot(fsob,main='Función de sobrevivncia',col=4)
plot(fden,type='b',lwd=3,main = 'Función de densidad', col=2)
plot(fdis,type='b',lwd=3,main = 'Función de distribución', col=3)
plot(fsob,type='b',lwd=3,main = 'Función de sobreviencia', col=4)
fden<-dbinom(0:10,n,p) #Función original
fmod<-dzmbinom(0:10,n,p,p0) #Función modificada
n=10
p=0.30
p0=0.20
fden<-dbinom(0:10,n,p) #Función original
fmod<-dzmbinom(0:10,n,p,p0) #Función modificada
ftrun<-dztbinom(0:10,n,p) #Pr en 0 vale 0
par(mfrow=c(2,3))
barplot(fden,main='Función de densidad',col=2)
barplot(fdis,main='Función modificada',col=3)
barplot(fsob,main='Función truncada',col=4)
plot(fden,type='b',lwd=3,main = 'Función de densidad', col=2)
plot(fdis,type='b',lwd=3,main = 'Función modificada', col=3)
plot(fsob,type='b',lwd=3,main = 'Función truncada', col=4)
par(mfrow=c(2,3))
barplot(fden,main='Función de densidad',col=2)
barplot(fmod,main='Función modificada',col=3)
barplot(ftrun,main='Función truncada',col=4)
plot(fden,type='b',lwd=3,main = 'Función de densidad', col=2)
plot(fmod,type='b',lwd=3,main = 'Función modificada', col=3)
plot(ftrun,type='b',lwd=3,main = 'Función truncada', col=4)
eventos=c(370412,46545,3935,317,28,3)
eventos=c(370412,46545,3935,317,28,3) # Eventos agrupados
reclamos<-rep(1:length(eventos)-1,times=eventos) #Eventos individuales
reclamos
p0=eventos[1]/sum(eventos)
p0
mod4<-fitdist(reclamos,'zmnbinom',method='mle',discrete=T,start=list(size=1,prob=0.08),fix.arg=list(p0=p0))
summary(mod4)
mod4
#Validación del modelo
gofstat(mod4)
# Parametros
coef(mod4)
# Parametros
parametros=coef(mod4)
parametros[1]
parametros[2]
eventos=c(5,11,14,7,2,5,3) #Eventos agrupados
reclamos<-rep(1:length(eventos)-1,times=eventos) #Eventos individuales
reclamos
p0=eventos[1]/sum(eventos)
p0
mod5<-fitdist(reclamos,'pois',method='mle',discrete=T,start=list(lambda=0.20))
summary(mod5)
mod5
# Validación del modelo
gofstat(mod5)
install.packages("tidyverse")
R.Version()
setwd("C:/Users/Carlos Campos/Desktop/GitHub/Curso-transactSQL/Recursos")
u
setwd("C:/Users/Carlos Campos/Desktop/GitHub/Curso-transactSQL/Recursos")
Estudiantes<-read.csv(file="Ejemplo+Estudiantes.csv", header = TRUE, sep = ",",dec = ".",row.names = "1")
Estudiantes<-read.csv(file="Ejemplo+Estudiantes.csv", header = TRUE, sep = ",", dec = ".", row.names = "1")
Estudiantes<-read.csv(file="Ejemplo+Estudiantes.csv", header = TRUE, sep = ",", dec = ".", row.names = 1)
View(Estudiantes)
# Como indicamos que la tabla tiene encabezados, podemos pedir que nos muestre el nombre de las columnas
names(Estudiantes)
# Con el comando str podemos ver qué tipo de variables tiene cada columna
str(Estudiantes)
write.csv(Estudiantes,"C:/Users/Carlos Campos/Desktop/GitHub/Curso-transactSQL/Recursos/Estudiantes guardado desde R.csv")
# Los vectores en lenguaje R almacenan solamente valores DEL MISMO TIPO
v<-c(1,"r",3,"t")
v
# Veamos que tipo de dato es el vector v
class(v)
str(v)
#Uniendo vectores
Producto<-c('lápiz', 'cuaderno','borrador')
Precio_Unitario<-as.double(c(5,25,7))
Suc1_Cantidad<-as.integer(c(3,5,2))
Suc2_Cantidad<-as.integer(c(1,20,9))
#Unimos los vectores para formar un dataframe
#NOTA: los vectores deben tener la misma longitud
Papeleria<-data.frame(Producto,Precio_Unitario,Suc1_Cantidad,Suc2_Cantidad)
View(Papeleria)
Papeleria$Subtotal<-Papeleria$Precio_Unitario*(Papeleria$Suc1_Cantidad+Papeleria$Suc2_Cantidad)
Papeleria$Subtotal
View(Papeleria)
##### Sumando los valores de un vector
Suma<-sum(Papeleria$Subtotal)
Suma
print(paste('Monto total de ventas: ' Suma))
print(paste('Monto total de ventas: ', Suma))
setwd("C:/Users/Carlos Campos/Desktop/GitHub/Curso-transactSQL/Recursos")
Corredores<-read.csv(file='Maraton+NY.csv',header = T,sep = ',',dec = '.',row.names = 1)
View(Corredores)
#Vemos que se hallan cargado correctamente
str(Corredores)
#Obtenemos los nombre de las variables
nombres_variables<-names(Corredores)
nombres_variables
#Cuál es la posición de la variable 'home' en nombres_variables
which(nombres_variables=='home')
#Verificamos si se trata de un vector
is.vector(nombres_variables)
#Obtenemos uno o varios elementos en específico
nombres_variables[2:3]
nombres_variables[c(1,4)]
nombres_variables[1,4]
nombres_variables[1]
nombres_variables[1,4]
nombres_variables[c(1,4)]
#Todos excepto el valor de la posición 4
nombres_variables[-4]
#Obtenemos los números de corredor
numero_corredor<-row.names(Corredores)
#Obtenemos los números de corredor
numero_corredor<-row.names(Corredores)
str(numero_corredor)
numero_corredor<-as.numeric(numero_corredor)
str(numero_corredor)
#Obtener la posición en la que se encuentra un valor determiando
which(numero_corredor==10)
#Obtener la posición en la que se encuentra un valor determiando
which(numero_corredor==100)
numero_corredor[100]
numero_corredor[965]
#Obtener la posición en la que se encuentra un valor determiando
which(numero_corredor==100)
#Devuelve la posición dentro del vector del corredor cuyo id (numero de corredor) es  igual a 100
numero_corredor[965]
##### Obtener la información del corredor
corr_100<-Corredores[965,]
##### Obtener la información del corredor
corr_100<-Corredores[965, ]
corr_100
##### Obtener el pais al que pertenece el corredor número 100
corr_100["home"]
which(corr_100=='NJ')
##### Obtener la información del país al que pertenecen los corredores
paises<-Corredores$home
paises
##### Si queremos obtener una lista de paises participantes usamos la función unique()
Lista_paises<-unique(Corredores$home)
Lista_paises
##### Conociendo la cantidad de paises que participaron
length(Lista_paises)
##### Ordenamos la lista de paises de forma ASCENDENTE usamos la funcion sort()
Lista_paises<-sort(Lista_paises)
Lista_paises
##### Para obtener los cinco paises que se encuentran en las primeras posiciones
Lista_paises[1:5]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=''),]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=''), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=' '), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=""), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==""), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==""), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Coredores$home==""), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==""), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==" "), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=="NAN"), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home=="NaN"), ]
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==""), ]
##### Si quisieramos saber cuál es el tiempo mínimo que se registró durante la cerrera
min(Corredores$time)
##### Para saber en qué fila del dataframe se encuentra el tiempo mínimo
which(Corredores$time=min(Corredores$time))
##### Para saber en qué fila del dataframe se encuentra el tiempo mínimo
which(Corredores$time==min(Corredores$time))
# Esto está bien, pero una alternativa es la siguiente
which.min(Corredores$time)
##### Si quisieramos saber cuál es el tiempo máximo que se registró durante la cerrera
max(Corredores$time)
#Para saber en qué fila del dataframe se encuentra el tiempo máximo
which(Corredores$time==max(Corredores$time))
which.max(Corredores$time)
which(Corredores$timez170)
which(Corredores$time<170)
corredores170<-which(Corredores$time<170)
Corredores[(corredores170),0]
Corredores[(corredores170), ]
#Podemos llevar a cabo operaciones sobre los elementos de un vector
Corredores$time_hours<-Corredores$time/60
Corredores
show(Corredores=
show(Corredores)
View(Corredores)
View(Corredores)
#Llevamos a cabo reemplazos sobre los elementos de un vector, esto se logra con gsub()
#esto sería equivalente a buscar y reemplazar de Excel o REPLACE de SQL
Corredores$home<-gsub("MEX","MEXICO",Corredores$home)
View(Corredores)
Corredores<-read.csv(file='Maraton+NY.csv',header = T,sep = ',',dec = '.',row.names = 1)
##### Obtener el pais al que pertenece el corredor número 100
corr_100["home"]
View(Corredores)
#####Vemos cuales corredores tienen un espacio en blanco en la variable 'home'
Corredores[(Corredores$home==""), ]
#Llevamos a cabo reemplazos sobre los elementos de un vector, esto se logra con gsub()
#esto sería equivalente a buscar y reemplazar de Excel o REPLACE de SQL
Corredores$home<-gsub("MEX","MEXICO",Corredores$home)
View(Corredores)
##### Graficamos la variable gender
plot(Corredores$gender)
##### Graficamos la variable gender
plot(Corredores$gender)
##### Graficamos la variable gender
plot(Corredores$gender)
Corredores$gender
##### Graficamos la variable gender
plot(Corredores$gender)
str(Corredores$gender)
##### Asignamos niveles a la variable gender para convertirla en ordinal
Corredores$gender<-factor(Corredores$gender,
levels=c('Male','Female'), #Los niveles en el orden que queremos
ordered=T)
plot(Corredores$gender)
